(ns euler.problem1)

;; * Problem 1
;; If we list all the natural numbers below 10 that are multiples of 3 or
;; 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.  Find the
;; sum of all the multiples of 3 or 5 below 1000.

(filter #(or (zero? (mod % 3)) (zero? (mod % 5))) (range 1 101))
;; => (3 5 6 9 10 12 15 18 20 21 24 25 27 30 33 35 36 39 40 42 45 48 50 51 54 55 57 60 63 65 66 69 70 72 75 78 80 81 84 85 87 90 93 95 96 99 100)

(reduce + (filter #(or (= 0 (mod % 3)) (= 0 (mod % 5))) (range 1 1001)))
;; => 234168

;; * Problem 2

;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

(def fib-seq-cat
  (lazy-cat [0 1] (map + (rest fib-seq-cat) fib-seq-cat)))

(take 10 fib-seq-cat)
;; => (0 1 1 2 3 5 8 13 21 34)

(take-while #(< % 10) fib-seq-cat)
;; => (0 1 1 2 3 5 8)

(filter even? (take-while #(< % 10) fib-seq-cat))
;; => (0 2 8)

(reduce + (filter even? (take-while #(< % 4000000) fib-seq-cat)))
;; => 4613732

;; * Problem 3

;; The prime factors of 13195 are 5, 7, 13 and 29.

;; What is the largest prime factor of the number 600851475143 ?

(mod 13195 5)
;; => 0

(.isProbablePrime (BigInteger/valueOf 13195) 5)
;; => false
(.isProbablePrime (BigInteger/valueOf 5) 5)
;; => true

(defn factors-starting-at [f n]
  (cond
    (> f (Math/sqrt n)) (if (= n 1) [] [n])
    (= 0 (mod n f)) (cons f (factors-starting-at f (/ n f)))
    :else (recur (inc f) n)))

(defn prime-factors-of [n]
  (factors-starting-at 2 n))

(prime-factors-of 13195)
;; => (5 7 13 29)

(last (prime-factors-of 600851475143))
;; => 6857

;; * Problem 4

;; A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

;; Find the largest palindrome made from the product of two 3-digit numbers.

(defn palindrome? [x]
  (let [s (str x)]
    (zero? (compare s (apply str (reverse s))))))

(palindrome? "121")
;; => true

(palindrome? "122")
;; => false

(def d3 (range 999 99 -1))

(def dim (apply concat(for [n d3] (filter #(not (nil? %))
           (for [m d3] (if (>= n m) [n m]))))))

(last (sort (filter palindrome? (map #(apply * %) dim))))
;; => 906609

;; * Problem 5

;; 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

;; What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

;; if divisable by 10 then div by 5 and 2
;; divisable by 11 12 13 14 15 16 17 18 19 20

(defn divved [n]
  (zero? (reduce + (list (mod n 6) (mod n 8) (mod n 5) (mod n 7) (mod n 9)))))
(divved 2520)
;; => true

(defn divved [n]
  (zero? (reduce + (list (mod n 11) (mod n 12) (mod n 13) (mod n 14) (mod n 15) (mod n 16) (mod n 17) (mod n 18) (mod n 19) (mod n 20)))))

(first (filter divved (iterate inc 1)))
;; => 232792560

;; * Problem 6
;; https://projecteuler.net/problem=6

;; The sum of the squares of the first ten natural numbers is,

;; The square of the sum of the first ten natural numbers is,
;; Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is

;; .

;; Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

(defn sqr [n] (* n n))

(let [rn (range 1 101)]
  (- (sqr (reduce + rn)) (reduce + (map sqr rn))))
;; => 25164150
  
;; * Problem 7

;; By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

;; What is the 10 001st prime number?

(def certainty 5)

(defn prime? [n]
      (.isProbablePrime (BigInteger/valueOf n) certainty))

(last (take 10001
      (filter prime? (range 1 Integer/MAX_VALUE))))
;; => 104729

;; * Problem 8

;; The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

;; 73167176531330624919225119674426574742355349194934
;; 96983520312774506326239578318016984801869478851843
;; 85861560789112949495459501737958331952853208805511
;; 12540698747158523863050715693290963295227443043557
;; 66896648950445244523161731856403098711121722383113
;; 62229893423380308135336276614282806444486645238749
;; 30358907296290491560440772390713810515859307960866
;; 70172427121883998797908792274921901699720888093776
;; 65727333001053367881220235421809751254540594752243
;; 52584907711670556013604839586446706324415722155397
;; 53697817977846174064955149290862569321978468622482
;; 83972241375657056057490261407972968652414535100474
;; 82166370484403199890008895243450658541227588666881
;; 16427171479924442928230863465674813919123162824586
;; 17866458359124566529476545682848912883142607690042
;; 24219022671055626321111109370544217506941658960408
;; 07198403850962455444362981230987879927244284909188
;; 84580156166097919133875499200524063689912560717606
;; 05886116467109405077541002256983155200055935729725
;; 71636269561882670428252483600823257530420752963450

;; Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

(def bignumstr "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450")

(count bignumstr)
;; => 1000

(last (sort (for [x (range 987)]
              (->> (subs bignumstr x (+ x 13))
                   (map #(Integer/parseInt (str %)))
                   (apply *)))))
;; => 23514624000

;; * Problem 9

;; A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
;; a2 + b2 = c2

;; For example, 32 + 42 = 9 + 16 = 25 = 52.

;; There exists exactly one Pythagorean triplet for which a + b + c = 1000.
;; Find the product abc.

(defn isthousand [a b c] (= 1000 (+ a b c)))
(defn third [v] (nth v 2))

(reduce * (first
           (filter (fn [[a b c]] (= (+ (* a a) (* b b)) (* c c)))
                     (remove nil? (for [a (range 1 1001) b (range 1 1001) c (range 1 1001)]
                                    (if (and (isthousand a b c) (< a b c)) [a b c]))))))

(->> (for [a (range 1 1001) b (range 1 1001) c (range 1 1001)]
       (if (and (isthousand a b c) (< a b c)) [a b c]))
     (remove nil?)
     (filter (fn [[a b c]] (= (+ (* a a) (* b b)) (* c c))))
     (first)
     (reduce *))

;; => 31875000
;; => [200 375 425]

;; * Problem 10
;; Summation of primes

;; The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

;; Find the sum of all the primes below two million.

(defn isprime [n] (.isProbablePrime (BigInteger/valueOf n) 7))

(defn isPrime? 
    "returns true if the input number is a prime number, false otherwise"
    [n]
    (let [divisors (range 2 (inc (int (Math/sqrt n)))) 
          remainders (map #(mod n %) divisors)]
      (not-any? #(= % 0) remainders)))

(count (filter isprime (range 1 2000000)))
;; => 148933
(count (filter isPrime? (range 1 2000000)))
;; => 148934

(reduce + (map bigint (filter isPrime? (range 1 2000001))))
;; => 142913828923N

(reduce + (map bigint (filter isprime (range 1 2000001))))
;; => 142915815943N

(bigint 142913828922)

;; * Problem 11
;; Largest product in a grid

;; In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

;; 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
;; 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
;; 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
;; 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
;; 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
;; 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
;; 32 98 81 28 64 23 67 10 *26* 38 40 67 59 54 70 66 18 38 64 70
;; 67 26 20 68 02 62 12 20 95 *63* 94 39 63 08 40 91 66 49 94 21
;; 24 55 58 05 66 73 99 26 97 17 *78* 78 96 83 14 88 34 89 63 72
;; 21 36 23 09 75 00 76 44 20 45 35 *14* 00 61 33 97 34 31 33 95
;; 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
;; 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
;; 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
;; 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
;; 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
;; 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
;; 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
;; 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
;; 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
;; 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

;; The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

;; What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?

(require '[clojure.string :as s])

(def grid "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
           49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
           81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
           52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
           22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
           24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
           32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
           67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
           24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
           21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
           78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
           16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
           86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
           19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
           04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
           88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
           04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
           20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
           20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
           01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48")

(def v (mapv #(Integer/parseInt %) (s/split grid #"[ \n]+")))

(defn row [v n]
  (subvec v (* n 20) (+ (* n 20) 20)))

(defn col [v n]
  (mapv #(nth % n) (partition 20 v)))

(defn get-horizontal [v x y]
  (if (<= x 16) (subvec (row v y) x (+ x 4))))

(defn get-vertical [v x y]
  (if (<= y 16) (subvec (col v x) y (+ y 4))))

(defn get-diag-sw [v x y]
  (if (and (<= x 16) (<= y 16))
    (into-array (for [n (range 4)] (nth (get-horizontal v x (+ n y)) n)))))

(defn get-diag-se [v x y]
  (if (and (>= x 3) (<= y 16))
    (into-array (for [n (reverse (range 4))] (nth (get-horizontal v (- x 3) (+ y (- 3 n))) n)))))

(->> (for [x (range 20) y (range 20)]
       (filterv #(not (nil? %)) [(get-horizontal v x y) (get-vertical v x y) (get-diag-se v x y) (get-diag-sw v x y)]))
     (apply concat)
     (map #(apply * %))
     sort
     last)
;; => 70600674
